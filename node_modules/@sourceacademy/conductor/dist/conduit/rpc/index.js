import{RpcReturnMessage as e,RpcErrorMessage as t,RpcCallMessage as n}from"./types/index.js";function r(r,s){const c=[];let o=0;return r.subscribe(async n=>{switch(n.type){case 0:{const{fn:c,args:o,invokeId:a}=n.data;try{const t=await s[c](...o);a>0&&r.send(new e(a,t))}catch(e){a>0&&r.send(new t(a,e))}break}case 1:{const{invokeId:e,res:t}=n.data;c[e]?.[0]?.(t),delete c[e];break}case 2:{const{invokeId:e,err:t}=n.data;c[e]?.[1]?.(t),delete c[e];break}}}),new Proxy({},{get(e,t,s){const a=Reflect.get(e,t,s);if(a)return a;const i="string"==typeof t&&"$"===t.charAt(0)?(...e)=>{r.send(new n(t,e,0))}:(...e)=>{const s=++o;return r.send(new n(t,e,s)),new Promise((e,t)=>{c[s]=[e,t]})};return Reflect.set(e,t,i,s),i}})}export{r as makeRpc};
//# sourceMappingURL=index.js.map
